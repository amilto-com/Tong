#requires -Version 5.1
<#
TONG Programming Language Setup Script (Windows / PowerShell)

Usage:
    pwsh .\setup.ps1                # Build (release) and show quick start
    pwsh .\setup.ps1 -Global        # Build (release) and add a 'tong' shim in PATH
    pwsh .\setup.ps1 -Sdl           # Build with SDL3 feature enabled
    pwsh .\setup.ps1 -Sdl -Global   # Build with SDL3 + install shim
    pwsh .\setup.ps1 -Quiet         # Suppress non-error output

Flags:
    -Global  : Adds a user-scope PATH shim (no admin needed) similar to --global in setup.sh
    -Sdl     : Enables the 'sdl3' cargo feature (equivalent to ./setup.sh --sdl)
    -Quiet   : Reduce output (errors still shown)

This mirrors setup.sh behavior on Windows while using a PowerShell shim instead of a symlink.
#>

[CmdletBinding()]
param(
    [switch]$Global,
    [switch]$Quiet,
    [Alias('Sdl3')][switch]$Sdl
)

function Write-Info($msg) {
    if (-not $Quiet) { Write-Host $msg }
}

try {
    $repoRoot = $PSScriptRoot
    Write-Info "üöÄ Setting up TONG - The Ultimate Programming Language"
    Write-Info "=================================================="

    # Ensure Rust is available
    $cargo = Get-Command cargo -ErrorAction SilentlyContinue
    if (-not $cargo) {
        Write-Error "‚ùå Rust toolchain not found. Please install Rust from https://rustup.rs and re-run this script."
        exit 1
    }

    # Build the Rust project (release) with optional SDL feature
    Push-Location (Join-Path $repoRoot 'rust' 'tong')
    try {
        $featureArgs = @()
        if ($Sdl) {
            Write-Info "(enabling SDL3 feature)"
            $featureArgs += '--features'; $featureArgs += 'sdl3'
        }
        Write-Info "Building tong (release)..."
        cargo build --release @featureArgs
    }
    finally {
        Pop-Location
    }

    $releaseExe = Join-Path $repoRoot 'rust\tong\target\release\tong.exe'
    if (-not (Test-Path $releaseExe)) {
        Write-Error "Build did not produce $releaseExe"
        exit 1
    }

    if ($Global) {
        Write-Info "Creating user-level shim and updating PATH..."

        $binDir = Join-Path $HOME ".tong/bin"
        if (-not (Test-Path $binDir)) {
            New-Item -ItemType Directory -Path $binDir -Force | Out-Null
        }

        $shimPath = Join-Path $binDir "tong.ps1"

        $shim = @'
# Auto-generated by TONG setup.ps1 (PowerShell shim)
# Runs the Rust tong.exe if available; otherwise builds with cargo first.

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# Prefer a Rust-built tong.exe if available
$rustCandidates = @(
    (Join-Path $HOME ".cargo\bin\tong.exe"),
    (Join-Path "{REPO_ROOT}" "rust\tong\target\release\tong.exe"),
    (Join-Path "{REPO_ROOT}" "rust\tong\target\debug\tong.exe")
)

foreach ($exe in $rustCandidates) {
    if (Test-Path $exe) {
        & $exe @args
        exit $LASTEXITCODE
    }
}

# If not found, try to build the Rust binary and run it
$cargo = Get-Command cargo -ErrorAction SilentlyContinue
if ($cargo) {
    Push-Location (Join-Path "{REPO_ROOT}" "rust\tong")
    try {
        cargo build --quiet
        $exe = Join-Path (Get-Location) "target\debug\tong.exe"
    }
    finally {
        Pop-Location
    }
    if (Test-Path $exe) {
        & $exe @args
        exit $LASTEXITCODE
    }
}

Write-Error "Could not find or build tong.exe. Please run 'cargo build' inside rust/tong."
exit 1
'@

        # Inject the repository root while preserving $-variables in the shim
        $shim = $shim.Replace('{REPO_ROOT}', $repoRoot)

        Set-Content -Path $shimPath -Value $shim -Encoding UTF8 -Force

        # Ensure the bin directory is in the user's PATH
        $userPath = [Environment]::GetEnvironmentVariable('PATH', 'User')
        if (-not ($userPath -split ';' | Where-Object { $_ -eq $binDir })) {
            $newUserPath = if ([string]::IsNullOrWhiteSpace($userPath)) { $binDir } else { "$userPath;$binDir" }
            [Environment]::SetEnvironmentVariable('PATH', $newUserPath, 'User')
            # Also update current session
            if (-not ($env:PATH -split ';' | Where-Object { $_ -eq $binDir })) { $env:PATH = "$env:PATH;$binDir" }
            Write-Info "‚úÖ Added $binDir to your user PATH"
        }

        Write-Info "‚úÖ TONG is now available as 'tong' (tong.ps1) in new PowerShell sessions"
        Write-Info "   Try: tong --version"
        Write-Info "Built binary at: $releaseExe"
    }
    else {
        Write-Info "Built binary at: $releaseExe"
        Write-Info "Run: $releaseExe examples\hello.tong"
        Write-Info "Or: cargo run --release -p tong -- examples/hello.tong"
        if ($Sdl) {
            Write-Info "(SDL3 feature enabled in this build)"
        } else {
            Write-Info "To enable SDL3 feature: pwsh .\\setup.ps1 -Sdl [-Global]"
        }
        Write-Info "Install shim for easy access: pwsh .\\setup.ps1 -Global"
    }

    Write-Host ""
    Write-Host "üéØ Quick Start:"
    Write-Host "  cargo run -p tong -- ../../examples/hello.tong        # Run example"
    Write-Host "  cargo build -p tong --release                        # Build optimized binary"
    Write-Host "  tong ../../examples/hello.tong                       # After -Global shim install"
    Write-Host ""
    Write-Host "üñº  SDL Pong example (needs feature):"
    Write-Host "  cargo run --release --features sdl3 -- ../../examples/modules/sdl/pong.tong"
    Write-Host "  pwsh .\\setup.ps1 -Sdl -Global   # install shim with SDL3-enabled binary"
    Write-Host ""
    Write-Host "üìö Examples available in examples/ directory"
    Write-Host "üìñ See README.md for full documentation"
    Write-Host ""
    Write-Host "‚ú® TONG is ready for heterogeneous computing!"
}
catch {
    Write-Error $_
    exit 1
}
