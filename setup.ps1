#requires -Version 5.1
<#
TONG Programming Language Setup Script (Windows / PowerShell)

Usage:
  pwsh .\setup.ps1            # Show usage and quick start
  pwsh .\setup.ps1 -Global    # Create a 'tong' command in your PATH (user scope)

This mirrors setup.sh behavior on Windows. No admin rights required.
#>

[CmdletBinding()]
param(
    [switch]$Global,
    [switch]$Quiet
)

function Write-Info($msg) {
    if (-not $Quiet) { Write-Host $msg }
}

try {
    $repoRoot = $PSScriptRoot
    Write-Info "ðŸš€ Setting up TONG - The Ultimate Programming Language"
    Write-Info "=================================================="

    # Check Python availability
    $python = Get-Command python -ErrorAction SilentlyContinue
    if (-not $python) { $python = Get-Command py -ErrorAction SilentlyContinue }
    if (-not $python) {
        Write-Warning "Python not found on PATH. Install Python 3.10+ and re-run this script."
    }

    if ($Global) {
        Write-Info "Creating user-level shim and updating PATH..."

        $binDir = Join-Path $HOME ".tong/bin"
        if (-not (Test-Path $binDir)) {
            New-Item -ItemType Directory -Path $binDir -Force | Out-Null
        }

        $shimPath = Join-Path $binDir "tong.ps1"

        # Prefer 'py' launcher if available, otherwise 'python'
        $launcher = if (Get-Command py -ErrorAction SilentlyContinue) { 'py -3' } else { 'python' }

        $shim = @"
# Auto-generated by TONG setup.ps1 on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
# Invokes the TONG launcher script from your clone at:
#   $repoRoot

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# Forward all args to the Python entry point
& $launcher "${repoRoot}\tong.py" @args
"@

        Set-Content -Path $shimPath -Value $shim -Encoding UTF8 -Force

        # Ensure the bin directory is in the user's PATH
        $userPath = [Environment]::GetEnvironmentVariable('PATH', 'User')
        if (-not ($userPath -split ';' | Where-Object { $_ -eq $binDir })) {
            $newUserPath = if ([string]::IsNullOrWhiteSpace($userPath)) { $binDir } else { "$userPath;$binDir" }
            [Environment]::SetEnvironmentVariable('PATH', $newUserPath, 'User')
            # Also update current session
            if (-not ($env:PATH -split ';' | Where-Object { $_ -eq $binDir })) { $env:PATH = "$env:PATH;$binDir" }
            Write-Info "âœ… Added $binDir to your user PATH"
        }

        Write-Info "âœ… TONG is now available as 'tong' (tong.ps1) in new PowerShell sessions"
        Write-Info "   Try: tong --version"
    }
    else {
        Write-Info "Run 'python .\\tong.py' to start TONG (or 'py -3 .\\tong.py' if using the Python launcher)"
        Write-Info "Or run 'pwsh .\\setup.ps1 -Global' to install a 'tong' command in your PATH"
    }

    Write-Host ""
    Write-Host "ðŸŽ¯ Quick Start:"
    Write-Host "  python .\\tong.py                     # Start REPL"
    Write-Host "  python .\\tong.py examples\\hello.tong # Run example"
    Write-Host "  python .\\tong.py --help              # Show help"
    Write-Host ""
    Write-Host "ðŸ“š Examples available in examples/ directory"
    Write-Host "ðŸ“– See README.md for full documentation"
    Write-Host ""
    Write-Host "âœ¨ TONG is ready for heterogeneous computing!"
}
catch {
    Write-Error $_
    exit 1
}
