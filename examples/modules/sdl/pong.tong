// SDL Pong example using TONG's module system

// Draw helpers for 7-segment digits (original-style score display)
fn draw_h(sdl, ren, x, y, w, t, r, g, b, a) { sdl.fill_rect(ren, x, y, w, t, r, g, b, a) }
fn draw_v(sdl, ren, x, y, h, t, r, g, b, a) { sdl.fill_rect(ren, x, y, t, h, r, g, b, a) }

// Draw a single 7-segment digit at (x,y)
// Dimensions: segment thickness t, horizontal length w, vertical height h
fn draw_digit(sdl, ren, x, y, d, t, w, h, r, g, b, a) {
  // Segment positions (a..g)
  let ax = x + t
  let ay = y
  let bx = x + t + w
  let by = y + t
  let cx = x + t + w
  let cy = y + t + h + t
  let dx = x + t
  let dy = y + t + h + t + h + t
  let ex = x
  let ey = y + t + h + t
  let fx = x
  let fy = y + t
  let gx = x + t
  let gy = y + t + h

  // For digit 'd', draw required segments (expanded without logical OR)
  // a: 0,2,3,5,6,7,8,9
  if d == 0 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 2 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 3 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 5 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 6 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 7 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 8 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  if d == 9 { draw_h(sdl, ren, ax, ay, w, t, r, g, b, a) }
  // b: 0,1,2,3,4,7,8,9
  if d == 0 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 1 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 2 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 3 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 4 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 7 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 8 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  if d == 9 { draw_v(sdl, ren, bx, by, h, t, r, g, b, a) }
  // c: 0,1,3,4,5,6,7,8,9
  if d == 0 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 1 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 3 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 4 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 5 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 6 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 7 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 8 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  if d == 9 { draw_v(sdl, ren, cx, cy, h, t, r, g, b, a) }
  // d: 0,2,3,5,6,8,9
  if d == 0 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  if d == 2 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  if d == 3 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  if d == 5 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  if d == 6 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  if d == 8 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  if d == 9 { draw_h(sdl, ren, dx, dy, w, t, r, g, b, a) }
  // e: 0,2,6,8
  if d == 0 { draw_v(sdl, ren, ex, ey, h, t, r, g, b, a) }
  if d == 2 { draw_v(sdl, ren, ex, ey, h, t, r, g, b, a) }
  if d == 6 { draw_v(sdl, ren, ex, ey, h, t, r, g, b, a) }
  if d == 8 { draw_v(sdl, ren, ex, ey, h, t, r, g, b, a) }
  // f: 0,4,5,6,8,9
  if d == 0 { draw_v(sdl, ren, fx, fy, h, t, r, g, b, a) }
  if d == 4 { draw_v(sdl, ren, fx, fy, h, t, r, g, b, a) }
  if d == 5 { draw_v(sdl, ren, fx, fy, h, t, r, g, b, a) }
  if d == 6 { draw_v(sdl, ren, fx, fy, h, t, r, g, b, a) }
  if d == 8 { draw_v(sdl, ren, fx, fy, h, t, r, g, b, a) }
  if d == 9 { draw_v(sdl, ren, fx, fy, h, t, r, g, b, a) }
  // g: 2,3,4,5,6,8,9
  if d == 2 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
  if d == 3 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
  if d == 4 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
  if d == 5 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
  if d == 6 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
  if d == 8 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
  if d == 9 { draw_h(sdl, ren, gx, gy, w, t, r, g, b, a) }
}

// Draw a non-negative integer using 1-2 digits at (x,y)
fn draw_number(sdl, ren, x, y, n, t, w, h, r, g, b, a) {
  let tens = 0
  let temp = n
  while temp >= 10 {
    tens = tens + 1
    temp = temp - 10
  }
  let ones = n % 10
  let digit_w = w + 2*t
  if n >= 10 {
    draw_digit(sdl, ren, x, y, tens, t, w, h, r, g, b, a)
    draw_digit(sdl, ren, x + digit_w + t, y, ones, t, w, h, r, g, b, a)
  } else {
    draw_digit(sdl, ren, x, y, ones, t, w, h, r, g, b, a)
  }
}

// Draw a number whose RIGHT edge is aligned at right_x (for right-justifying left player's score)
// Supports 1-2 digits like draw_number. If more than 2 digits occur, alignment will drift (game unlikely to reach >99).
fn draw_number_right(sdl, ren, right_x, y, n, t, w, h, r, g, b, a) {
  let digit_w = w + 2*t
  let width = digit_w
  if n >= 10 { width = digit_w + t + digit_w }
  let start_x = right_x - width
  draw_number(sdl, ren, start_x, y, n, t, w, h, r, g, b, a)
}

fn main() {
  let sdl = import("sdl")
  sdl.init()
  let win = sdl.create_window("TONG Pong - Press ESC or Q to quit", 800, 600)
  let ren = sdl.create_renderer(win)

  print("Controls: W/S (left paddle), UP/DOWN (right paddle), ESC/Q (quit)")
  print("Close window button should also work")

  // Debug toggle (set to true to trace)
  let debug = false
  let frame = 0

  // Game state
  let ball_x = 400
  let ball_y = 300
  let prev_x = ball_x
  let prev_y = ball_y
  let ball_vx = 5
  let ball_vy = 4
  let ball_size = 12
  let pw = 15
  let ph = 80
  let p1_x = 20
  let p2_x = 800 - 20 - pw
  let p1_y = 260
  let p2_y = 260
  let score1 = 0
  let score2 = 0

  // Scoreboard segment configuration (defined once to avoid clobbering generic names each frame)
  let seg_t = 6
  let seg_w = 36
  let seg_h = 54
  let seg_gap = 20
  let seg_top_y = 20

  let running = true
  while running {
    if debug { print("frame", frame, "pre loop running", running) }
    // Handle quit events - check window close button first
    let quit_evt = sdl.poll_quit()
    if debug { print("frame", frame, "poll_quit()", quit_evt) }
    if quit_evt {
      running = false
    }
    
    // Also allow ESC or Q to quit
    if sdl.key_down(sdl.K_ESCAPE) { 
      running = false 
    }
    if sdl.key_down(sdl.K_Q) { 
      running = false 
    }

    // Paddle controls
    if sdl.key_down(sdl.K_W) {
      p1_y = p1_y - 8
    }
    if sdl.key_down(sdl.K_S) {
      p1_y = p1_y + 8
    }
    if sdl.key_down(sdl.K_UP) {
      p2_y = p2_y - 8
    }
    if sdl.key_down(sdl.K_DOWN) {
      p2_y = p2_y + 8
    }

    // Clamp paddles to screen
    if p1_y < 0 { p1_y = 0 }
    if p1_y + ph > 600 { p1_y = 600 - ph }
    if p2_y < 0 { p2_y = 0 }
    if p2_y + ph > 600 { p2_y = 600 - ph }

  // Store previous position then move ball
  prev_x = ball_x
  prev_y = ball_y
    ball_x = ball_x + ball_vx
    ball_y = ball_y + ball_vy

    // Ball bounces off top/bottom walls
    if ball_y <= 0 { 
      ball_y = 0
      ball_vy = -ball_vy 
    }
    if ball_y >= 600 - ball_size { 
      ball_y = 600 - ball_size
      ball_vy = -ball_vy 
    }

  // Ball hits left paddle (swept AABB + direction check)
    if ball_vx < 0 {
      // Check if we've crossed the right edge of the left paddle
      if prev_x >= p1_x + pw {
        if ball_x <= p1_x + pw {
          // y overlap in either previous or current position
          if ball_y + ball_size >= p1_y { if ball_y <= p1_y + ph {
            // bounce
            ball_x = p1_x + pw
            ball_vx = -ball_vx
          } } else {
            if prev_y + ball_size >= p1_y { if prev_y <= p1_y + ph {
              // bounce (swept)
              ball_x = p1_x + pw
              ball_vx = -ball_vx
            } }
          }
        }
      } else {
        // Fallback to current AABB overlap
        if ball_x <= p1_x + pw { if ball_x + ball_size >= p1_x { if ball_y + ball_size >= p1_y { if ball_y <= p1_y + ph {
          // bounce (AABB)
          ball_x = p1_x + pw
          ball_vx = -ball_vx
        }}}}
      }
    }

  // Ball hits right paddle (swept AABB + direction check)
    if ball_vx > 0 {
      // Check if we've crossed the left edge of the right paddle
      if prev_x + ball_size <= p2_x {
        if ball_x + ball_size >= p2_x {
          // y overlap in either previous or current position
          if ball_y + ball_size >= p2_y { if ball_y <= p2_y + ph {
            // bounce
            ball_x = p2_x - ball_size
            ball_vx = -ball_vx
          } } else {
            if prev_y + ball_size >= p2_y { if prev_y <= p2_y + ph {
              // bounce (swept)
              ball_x = p2_x - ball_size
              ball_vx = -ball_vx
            } }
          }
        }
      } else {
        // Fallback to current AABB overlap
        if ball_x + ball_size >= p2_x { if ball_x <= p2_x + pw { if ball_y + ball_size >= p2_y { if ball_y <= p2_y + ph {
          // bounce (AABB)
          ball_x = p2_x - ball_size
          ball_vx = -ball_vx
        }}}}
      }
    }

    // Scoring - ball goes off left/right edges
    if ball_x < 0 { 
      score2 = score2 + 1
      print("Player 2 scores! Score:", score1, "-", score2)
      ball_x = 400
      ball_y = 300
      ball_vx = 5
      ball_vy = 4 
    }
    if ball_x > 800 { 
      score1 = score1 + 1
      print("Player 1 scores! Score:", score1, "-", score2)
      ball_x = 400
      ball_y = 300
      ball_vx = -5
      ball_vy = 4 
    }

    // Render everything
    // Dark background but not black
    sdl.set_draw_color(ren, 40, 40, 60, 255)
    sdl.clear(ren)
    
  // Center line (bright white, thicker)
    sdl.fill_rect(ren, 398, 0, 4, 600, 255, 255, 255, 255)
    
    // Ball (bright yellow, larger)
    sdl.fill_rect(ren, ball_x, ball_y, ball_size, ball_size, 255, 255, 0, 255)
    
    // Left paddle (bright cyan, brighter)
  sdl.fill_rect(ren, p1_x, p1_y, pw, ph, 0, 255, 255, 255)
    
    // Right paddle (bright magenta, brighter)
  sdl.fill_rect(ren, p2_x, p2_y, pw, ph, 255, 0, 255, 255)
    
  // Draw scoreboard at top center in classic 7-seg style
  let digit_w = seg_w + 2*seg_t
  // Right anchor for left score (so it grows to the LEFT as digits increase)
  let left_right_anchor = 400 - seg_gap
  // Left anchor for right score (so it grows to the RIGHT)
  let right_left_anchor = 400 + seg_gap
  draw_number_right(sdl, ren, left_right_anchor, seg_top_y, score1, seg_t, seg_w, seg_h, 255, 255, 255, 255)
  draw_number(sdl, ren, right_left_anchor, seg_top_y, score2, seg_t, seg_w, seg_h, 255, 255, 255, 255)

  sdl.present(ren)
    sdl.delay(16) // ~60 FPS
    frame = frame + 1
    if debug { print("frame", frame, "post present ball", ball_x, ball_y, "scores", score1, score2) }
  }

  print("Game over! Final score:", score1, "-", score2)
  sdl.destroy_renderer(ren)
  sdl.destroy_window(win)
  sdl.quit()
}

// Start the game
main()
