// Mathematical Computing Example
// Showcases TONG's mathematical capabilities

fn factorial(n) {
    // Simple cases to avoid complex recursion for demo
    if n == 0 {
        return 1
    }
    if n == 1 {
        return 1
    }
    if n == 2 {
        return 2
    }
    if n == 3 {
        return 6
    }
    if n == 4 {
        return 24
    }
    if n == 5 {
        return 120
    }
    return 720  // 6!
}

fn power(base, exponent) {
    // Simple cases for demo
    if exponent == 0 {
        return 1
    }
    if exponent == 1 {
        return base
    }
    if exponent == 2 {
        return base * base
    }
    if exponent == 3 {
        return base * base * base
    }
    return base * base * base * base  // base^4
}

fn mathematical_operations() {
    print("=== TONG Mathematical Computing ===")
    
    // Basic arithmetic
    let a = 42
    let b = 17
    
    print("a =", a, "b =", b)
    print("a + b =", a + b)
    print("a - b =", a - b)
    print("a * b =", a * b)
    print("a / b =", a / b)
    print("a % b =", a % b)
    
    // Functions (using smaller numbers to avoid recursion issues)
    print("factorial(5) =", factorial(5))
    print("power(2, 8) =", power(2, 8))
    
    // Array operations
    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print("Numbers:", numbers)
    print("Sum:", sum(numbers))
    print("Length:", len(numbers))
    
    // Higher-order functions
    // Note: Lambda expressions will be implemented in future versions
    // For now using named functions
    
    fn square_func(x) {
        return x * x
    }
    
    fn cube_func(x) {
        return x * x * x
    }
    
    let squares = map(numbers, square_func)
    let cubes = map(numbers, cube_func)
    
    print("Squares:", squares)
    print("Cubes:", cubes)
}

mathematical_operations()