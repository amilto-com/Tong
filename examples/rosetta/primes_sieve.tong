// Rosetta Code: Sieve of Eratosthenes (generate primes up to N)
fn sieve(n) {
    // Simple trial division fallback (array push not implemented yet)
    var p = 2
    while p <= n {
        // check prime
        var d = 2
        var is_prime = true
        while d * d <= p {
            if p % d == 0 { is_prime = false }
            d = d + 1
        }
        if is_prime { print(p) }
        p = p + 1
    }
}

sieve(100)
